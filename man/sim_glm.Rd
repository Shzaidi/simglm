% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/sim_reg.r
\name{sim_glm}
\alias{sim_glm}
\title{Master generalized simulation function.}
\usage{
sim_glm(fixed, random, random3, fixed.param, random.param, random.param3,
  cov.param, k, n, p, randCor, randCor3, rand_dist, data_str, cor_vars = NULL,
  fact.vars = list(NULL), unbal = FALSE, unbal3 = FALSE,
  unbalCont = NULL, unbalCont3 = NULL)
}
\arguments{
\item{fixed}{One sided formula for fixed effects in the simulation.  To suppress intercept add -1 to formula.}

\item{random}{One sided formula for random effects in the simulation. Must be a subset of fixed.}

\item{random3}{One sided formula for random effects at third level in the simulation. Must be a subset of fixed
(and likely of random).}

\item{fixed.param}{Fixed effect parameter values (i.e. beta weights).  Must be same length as fixed.}

\item{random.param}{Variance of random effects. Must be same length as random.}

\item{random.param3}{Variance of third level random effects. Must be same length as random3.}

\item{cov.param}{List of mean and variance for fixed effects. Does not include intercept, time, or
interactions. Must be same order as fixed formula above.}

\item{k}{Number of third level clusters.}

\item{n}{Cluster sample size.}

\item{p}{Within cluster sample size.}

\item{randCor}{Correlation between random effects.}

\item{randCor3}{Correlation between third level random effects.}

\item{rand_dist}{Simulated random effect distribution.  Must be "lap", "chi", "norm", "bimod",
"norm" is default.}

\item{data_str}{Type of data. Must be "cross", "long", or "single".}

\item{fact.vars}{A nested list of factor, categorical, or ordinal variable specification,
each list must include numlevels and var.type (must be "lvl1" or "lvl2");
optional specifications are: replace, prob, value.labels.}

\item{unbal}{A vector of sample sizes for the number of observations for each level 2
cluster. Must have same length as level two sample size n. Alternative specification
can be TRUE, which uses additional argument, unbalCont.}

\item{unbal3}{A vector of sample sizes for the number of observations for each level 3
cluster. Must have same length as level two sample size k. Alternative specification
can be TRUE, which uses additional argument, unbalCont3.}

\item{unbalCont}{When unbal = TRUE, this specifies the minimum and maximum level one size,
will be drawn from a random uniform distribution with min and max specified.}

\item{unbalCont3}{When unbal3 = TRUE, this specifies the minimum and maximum level two size,
will be drawn from a random uniform distribution with min and max specified.}
}
\description{
Takes simulation parameters as inputs and returns simulated data.
}
\details{
Simulated data is useful for classroom demonstrations and to study
the impacts of assumption violations on parameter estimates, statistical
power, or empirical type I error rates.

This function allows researchers a flexible approach to simulate regression
models, including single level models and cross sectional or longitudinal
linear mixed models (aka. hierarchical linear models or multilevel models).
}
\examples{
\donttest{
# generating parameters for single level regression
fixed <- ~1 + act + diff + numCourse + act:numCourse
fixed.param <- c(2, 4, 1, 3.5, 2)
cov.param <- list(mean = c(0, 0, 0), sd = c(4, 3, 3), var.type = c("single", "single", "single"))
n <- 150
temp.single <- sim_glm(fixed = fixed, fixed.param = fixed.param, cov.param = cov.param,
n = n, data_str = "single")

# Longitudinal linear mixed model example
fixed <- ~1 + time + diff + act + time:act
random <- ~1 + time + diff
fixed.param <- c(4, 2, 6, 2.3, 7)
random.param <- c(7, 4, 2)
cov.param <- list(mean = c(0, 0), sd = c(1.5, 4), var.type = c("lvl1", "lvl2"))
n <- 150
p <- 30
randCor <- 0
rand_dist <- "norm"
data_str <- "long"
temp.long <- sim_glm(fixed, random, random3 = NULL, fixed.param, random.param, random.param3 = NULL,
 cov.param, k = NULL, n, p, randCor, randCor3 = NULL, rand_dist,
 data_str = data_str)


# Three level example
fixed <- ~1 + time + diff + act + actClust + time:act
random <- ~1 + time + diff
random3 <- ~ 1 + time
fixed.param <- c(4, 2, 6, 2.3, 7, 0)
random.param <- c(7, 4, 2)
random.param3 <- c(4, 2)
cov.param <- list(mean = c(0, 0, 0), sd = c(1.5, 4, 2),
var.type = c("lvl1", "lvl2", "lvl3"))
k <- 10
n <- 150
p <- 30
randCor <- 0
randCor3 <- 0
rand_dist <- "norm"
data_str <- "long"
temp.three <- sim_glm(fixed, random, random3, fixed.param, random.param,
random.param3, cov.param, k,n, p, randCor, randCor3, rand_dist,
data_str = data_str)


}
}

